<?php

namespace zibo\core\event\loader\io;

use zibo\library\filesystem\File;

/**
 * Cache decorator for another EventIO. This IO will get the events from the
 * wrapped IO and generate a PHP script to include. When the generated PHP
 * script exists, this will be used to define the events. It should be faster
 * since only 1 include is done which contains plain PHP variable
 * initialization
 */
class CachedEventIO implements EventIO {

    /**
     * EventIO which is cached by this instance
     * @var EventIO
     */
    private $io;

    /**
     * File to write the cache to
     * @var zibo\library\filesystem\File
     */
    private $file;

    /**
     * Constructs a new cached EventIO
     * @param EventIO $io EventIO which needs a cache
     * @param zibo\library\filesystem\File $file File for the cache
     * @return null
     */
    public function __construct(EventIO $io, File $file) {
        $this->io = $io;
        $this->setFile($file);
    }

    /**
     * Sets the file for the generated code
     * @param zibo\library\filesystem\File $file The file to generate the code in
     * @return null
     */
    public function setFile(File $file) {
        $this->file = $file;
    }

    /**
     * Gets the file for the generated code
     * @return zibo\library\filesystem\File The file to generate the code in
     * @return null
     */
    public function getFile() {
        return $this->file;
    }

    /**
     * Reads all the events from the data source
     * @return array Hierarchic array with the name of the event as key and an
     * array with Event instances as value
     */
    public function readEvents() {
        if ($this->file->exists()) {
            // the generated script exists, include it
            include $this->file->getPath();

        	if (isset($events)) {
        	    // the script defined events, return it
                return $events;
        	}
        }
        // we have no events, use the wrapped IO to get one
    	$events = $this->io->readEvents();

    	// generate the PHP code for the obtained container
    	$php = $this->generatePhp($events);

    	// make sure the parent directory of the script exists
    	$parent = $this->file->getParent();
    	$parent->create();

    	// write the PHP code to file
    	$this->file->write($php);

    	// return the events
    	return $events;
    }

    /**
	 * Generates a PHP source file for the provided events
	 * @param array $events
	 * @return string
     */
    protected function generatePhp(array $events) {
        $output = "<?php\n\n";
        $output .= "/*\n";
        $output .= " * This file is generated by zibo\core\event\loader\io\CachedEventIO.\n";
        $output .= " */\n";
        $output .= "\n";
        $output .= "use zibo\\core\\event\\loader\\Event;\n";
        $output .= "\n";
        $output .= '$events' . " = array(\n";

        foreach ($events as $event => $eventListeners) {
            $output .= "\t" . var_export($event, true) . " => array(\n";
            foreach ($eventListeners as $eventListener) {
                $output .= "\t\tnew Event(" . var_export($eventListener->getEvent(), true) . ", " . var_export($eventListener->getCallback(), true) . ', ' . var_export($eventListener->getWeight(), true) . "),\n";
            }
            $output .= "\t),\n";
        }
        $output .= ");\n";

        return $output;
    }

}